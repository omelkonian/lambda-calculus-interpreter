% ----------------------------Prelude-----------------------------------

% ---------------BOOLEAN---------------
true  := (\x. (\y. x));
false := (\x. (\y. y));
not   := (\z. ((z false) true));
and   := (\p. (\q. ((p q) p)));
or    := (\p. (\q. ((p p) q)));
xor   := (\a. (\b. ((a (not b)) b))); 
cond  := (\z. (\x. (\y. ((z x) y))));

% ---------------ARITHMETIC OPERATIONS---------------
succ := (\n. (\f. (\x. (f ((n f) x)))));
pred := (\n. (\f. (\x. (((n (\g. (\h. (h (g f))))) (\u. x)) (\u. u)))));
add  := (\m. (\n. (\f. (\x. ((m f) ((n f) x))))));
sub  := (\m. (\n. ((n pred) m)));
mul  := (\m. (\n. (\f. (m (n f)))));
exp  := (\m. (\n. (n m)));

% ---------------ARITHMETIC PREDICATES---------------
IsZero := (\n. ((n (\x. false)) true));
EQ     := (\m. (\n. ((and (IsZero ((sub m) n))) (IsZero ((sub n) m))) ));
LEQ    := (\m. (\n. (IsZero ((sub m) n))));
LE     := (\m. (\n. ((and (not ((EQ m) n))) ((LEQ m) n))));
GR	   := (\m. (\n. (not ((LEQ m) n))));
GEQ   := (\m. (\n. (not ((LE m) n))));

% ---------------PAIR---------------
pair := (\x. (\y. (\t. ((t x) y))));
fst  := (\z. (z true));
snd  := (\z. (z false));


% ---------------LIST---------------
nil   := ((pair true) true);
isnil := fst;
cons  := (\h. (\t. ((pair false) ((pair h) t))));
head  := (\z. (fst (snd z)));
tail  := (\z. (snd (snd z)));

% ---------------OPERATORS---------------

&== := EQ;
&!= := (not EQ);
&<  := LE;
&<= := LEQ;
&>  := GR;
&>= := GEQ;
&&& := and;
&|| := or;
&!  := not;

&+  := add;
&-  := sub;
&*  := mul;
&^  := exp;

&,  := pair;
&:  := cons;

% ---------------LIST OPERATIONS---------------




% ---------------COMBINATORS---------------
Y := (\f. ((\x. (f (x x))) (\x. (f (x x)))));

recur := (\n. (((cond (IsZero n)) base) (recur (pred n))));