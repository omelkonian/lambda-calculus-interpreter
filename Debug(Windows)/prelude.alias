% ----------------------------Prelude-----------------------------------

% BOOLEAN
true  := (\x. (\y. x));
false := (\x. (\y. y));
not   := (\z. ((z false) true));
and   := (\p. (\q. ((p q) p)));
or    := (\p. (\q. ((p p) q)));
xor   := (\a. (\b. ((a (not b)) b))); 
cond  := (\z. (\x. (\y. ((z x) y))));

% ARITHMETIC OPERATIONS
succ := (\n. (\f. (\x. (f ((n f) x)))));
pred := (\n. (\f. (\x. (((n (\g. (\h. (h (g f))))) (\u. x)) (\u. u)))));
add  := (\m. (\n. (\f. (\x. ((m f) ((n f) x))))));
sub  := (\m. (\n. ((n pred) m)));
mul  := (\m. (\n. (\f. (m (n f)))));
exp  := (\m. (\n. (n m)));

% ARITHMETIC PREDICATES
IsZero := (\n. ((n (\x. false)) true));
LEQ    := (\m. (\n. (IsZero ((minus m) n))));
EQ     := (\m. (\n. ((and ((LEQ m) n)) ((LEQ n) m))));

% PAIR
pair := (\x. (\y. (\t. ((t x) y))));
fst  := (\z. (z true));
snd  := (\z. (z false));

% COMBINATORS
Y := (\f. ((\x. (f (x x))) (\x. (f (x x)))));

recur := (\n. (((cond (IsZero n)) base) (n (recur (pred n)))     ));